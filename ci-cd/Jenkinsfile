pipeline {
    agent { label 'ec2' }

    environment {
        DOCKER_REGISTRY = 'docker.io/sillysavant161'
        IMAGE_NAME = 'f1nance'
        CLIENT_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-client"
        SERVER_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-server"
        JIRA_ISSUE = 'CPS-1'
    }

    stages {

        stage('Notify Build Start') {
            steps {
                script {
                    slackSend(
                        channel: '#ci-cd',
                        color: '#439FE0',
                        message: "üöÄ *Build #${env.BUILD_NUMBER}* for *${env.JOB_NAME}* started on branch *${env.GIT_BRANCH ?: 'unknown'}*"
                    )
                    jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Build #${env.BUILD_NUMBER} started for ${env.JOB_NAME}")
                }
            }
        }

        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build and Push Images') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            docker build -t ${CLIENT_IMAGE}:${BUILD_NUMBER} -f ci-cd/client.Dockerfile .
                            docker push ${CLIENT_IMAGE}:${BUILD_NUMBER}
                            docker tag ${CLIENT_IMAGE}:${BUILD_NUMBER} ${CLIENT_IMAGE}:latest
                            docker push ${CLIENT_IMAGE}:latest

                            docker build -t ${SERVER_IMAGE}:${BUILD_NUMBER} -f ci-cd/server.Dockerfile .
                            docker push ${SERVER_IMAGE}:${BUILD_NUMBER}
                            docker tag ${SERVER_IMAGE}:${BUILD_NUMBER} ${SERVER_IMAGE}:latest
                            docker push ${SERVER_IMAGE}:latest
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Client Tests') {
                    steps {
                        script {
                            def clientContainer = docker.image("${CLIENT_IMAGE}:${BUILD_NUMBER}")
                                .run("--rm -d -p 3100:3000")
                            sleep 10
                            sh "curl -f http://localhost:3100 || exit 1"
                            sh "docker stop ${clientContainer.id}"
                        }
                    }
                }

                stage('Server Tests') {
                    steps {
                        script {
                            def serverContainer = docker.image("${SERVER_IMAGE}:${BUILD_NUMBER}")
                                .run("--rm -d -p 8100:8000")
                            sleep 10
                            sh "curl -f http://localhost:8100/ || exit 1"
                            sh "docker stop ${serverContainer.id}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when { branch 'develop' }
            steps {
                script {
                    try {
                        sh '''
                            docker rm -f f1nance-client-staging f1nance-server-staging || true
                            docker run -d --name f1nance-client-staging -p 3000:3000 ${CLIENT_IMAGE}:${BUILD_NUMBER}
                            docker run -d --name f1nance-server-staging -p 8000:8000 ${SERVER_IMAGE}:${BUILD_NUMBER}
                        '''
                        slackSend(channel: '#ci-cd', color: '#2eb886',
                                  message: "‚úÖ *Staging* deployment successful for build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Staging deployment succeeded for build #${env.BUILD_NUMBER}")
                    } catch (err) {
                        slackSend(channel: '#ci-cd', color: '#a30200',
                                  message: "‚ùå *Staging* deployment failed for build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Staging deployment failed for build #${env.BUILD_NUMBER}: ${err}")
                        error "Staging deployment failed"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when { branch 'main' }
            steps {
                script {
                    try {
                        sh '''
                            docker rm -f f1nance-client-prod f1nance-server-prod || true
                            docker run -d --name f1nance-client-prod -p 3000:3000 ${CLIENT_IMAGE}:${BUILD_NUMBER}
                            docker run -d --name f1nance-server-prod -p 8000:8000 ${SERVER_IMAGE}:${BUILD_NUMBER}
                        '''
                        slackSend(channel: '#ci-cd', color: '#2eb886',
                                  message: "üö¢ *Production* deployment successful for build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Production deployment succeeded for build #${env.BUILD_NUMBER}")
                    } catch (err) {
                        slackSend(channel: '#ci-cd', color: '#a30200',
                                  message: "üî• *Production* deployment failed for build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Production deployment failed for build #${env.BUILD_NUMBER}: ${err}")
                        error "Production deployment failed"
                    }
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker ps -aq | xargs -r docker stop
                docker container prune -f
            '''
            cleanWs()
        }

        success {
            slackSend(channel: '#ci-cd', color: '#36a64f',
                      message: "‚úÖ Pipeline succeeded for *${env.JOB_NAME}* build #${env.BUILD_NUMBER}")
            jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Build #${env.BUILD_NUMBER} succeeded for ${env.JOB_NAME}")
        }

        failure {
            slackSend(channel: '#ci-cd', color: '#ff0000',
                      message: "‚ùå Pipeline failed for *${env.JOB_NAME}* build #${env.BUILD_NUMBER}")
            jiraComment(issueKey: "${JIRA_ISSUE}", comment: "Build #${env.BUILD_NUMBER} failed for ${env.JOB_NAME}")
        }
    }
}

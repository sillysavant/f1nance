pipeline {
    agent { label 'ec2' }

    environment {
        DOCKER_REGISTRY = 'docker.io/sillysavant161'
        IMAGE_NAME = 'f1nance'
        CLIENT_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-client"
        SERVER_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-server"
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build and Push Images') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            docker build -t ${CLIENT_IMAGE}:${BUILD_NUMBER} -f ci-cd/client.Dockerfile ci-cd/
                            docker push ${CLIENT_IMAGE}:${BUILD_NUMBER}
                            docker tag ${CLIENT_IMAGE}:${BUILD_NUMBER} ${CLIENT_IMAGE}:latest
                            docker push ${CLIENT_IMAGE}:latest

                            docker build -t ${SERVER_IMAGE}:${BUILD_NUMBER} -f ci-cd/server.Dockerfile .
                            docker push ${SERVER_IMAGE}:${BUILD_NUMBER}
                            docker tag ${SERVER_IMAGE}:${BUILD_NUMBER} ${SERVER_IMAGE}:latest
                            docker push ${SERVER_IMAGE}:latest
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Client Tests') {
                    steps {
                        script {
                            def clientContainer = docker.image("${CLIENT_IMAGE}:${BUILD_NUMBER}")
                                .run("--rm -d -p 3100:3000")
                            sleep 10
                            sh "curl -f http://localhost:3100 || exit 1"
                            sh "docker stop ${clientContainer.id}"
                        }
                    }
                }

                stage('Server Tests') {
                    steps {
                        script {
                            def serverContainer = docker.image("${SERVER_IMAGE}:${BUILD_NUMBER}")
                                .run("--rm -d -p 8100:8000")
                            sleep 10
                            sh "curl -f http://localhost:8100/ || exit 1"
                            sh "docker stop ${serverContainer.id}"
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when { branch 'develop' }
            steps {
                sh '''
                    docker rm -f f1nance-client-staging f1nance-server-staging || true
                    docker run -d --name f1nance-client-staging -p 3000:3000 ${CLIENT_IMAGE}:${BUILD_NUMBER}
                    docker run -d --name f1nance-server-staging -p 8000:8000 ${SERVER_IMAGE}:${BUILD_NUMBER}
                '''
            }
        }

        stage('Deploy to Production') {
            when { branch 'main' }
            steps {
                sh '''
                    docker rm -f f1nance-client-prod f1nance-server-prod || true
                    docker run -d --name f1nance-client-prod -p 3000:3000 ${CLIENT_IMAGE}:${BUILD_NUMBER}
                    docker run -d --name f1nance-server-prod -p 8000:8000 ${SERVER_IMAGE}:${BUILD_NUMBER}
                '''
            }
        }
    }

    post {
        always {
            sh '''
                docker ps -aq | xargs -r docker stop
                docker container prune -f
            '''
        }
        success { echo 'Pipeline executed successfully.' }
        failure { echo 'Pipeline failed.' }
        cleanup { cleanWs() }
    }
}

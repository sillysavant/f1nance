pipeline {
    agent { label 'ec2' }

    environment {
        DOCKER_REGISTRY = 'docker.io/sillysavant161'
        IMAGE_NAME = 'f1nance'
        CLIENT_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-client"
        SERVER_IMAGE = "${DOCKER_REGISTRY}/${IMAGE_NAME}-server"
        JIRA_ISSUE = 'CPS-1'
        GITHUB_ACCOUNT = 'sillysavant'
        GITHUB_REPO = 'f1nance'
        GITHUB_CREDENTIALS = 'github-credentials'
        // Detect if this is a Pull Request
        IS_PR = "${env.CHANGE_ID != null ? 'true' : 'false'}"
    }

    stages {

        stage('Notify Build Start') {
            steps {
                script {
                    def branchInfo = env.CHANGE_ID ? "PR-${env.CHANGE_ID}" : env.BRANCH_NAME
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                context: 'Build', status: 'PENDING', description: "Build started on ${branchInfo}")
                    slackSend(channel: '#team2-ci-cd', color: '#439FE0',
                              message: "üöÄ *Build #${env.BUILD_NUMBER}* for *${env.JOB_NAME}* started on ${branchInfo}")
                    jiraComment(issueKey: "${JIRA_ISSUE}", body: "Build #${env.BUILD_NUMBER} started for ${branchInfo}")
                }
            }
        }

        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build and Push Client Image') {
            steps {
                script {
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                context: 'Client Docker Build', status: 'PENDING', description: 'Building client Docker image')
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            docker build -t ${CLIENT_IMAGE}:${BUILD_NUMBER} -f ci-cd/client.Dockerfile client/
                            docker push ${CLIENT_IMAGE}:${BUILD_NUMBER}
                            docker tag ${CLIENT_IMAGE}:${BUILD_NUMBER} ${CLIENT_IMAGE}:latest
                            docker push ${CLIENT_IMAGE}:latest
                        '''
                    }
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                context: 'Client Docker Build', status: 'SUCCESS', description: 'Client Docker image built and pushed')
                }
            }
        }

        stage('Build and Push Server Image') {
            steps {
                script {
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO,
                                context: 'Server Docker Build', status: 'PENDING', description: 'Building server Docker image')

                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            docker build -t ${SERVER_IMAGE}:${BUILD_NUMBER} -f ci-cd/server.Dockerfile server/
                            docker push ${SERVER_IMAGE}:${BUILD_NUMBER}
                            docker tag ${SERVER_IMAGE}:${BUILD_NUMBER} ${SERVER_IMAGE}:latest
                            docker push ${SERVER_IMAGE}:latest
                        '''
                    }

                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO,
                                context: 'Server Docker Build', status: 'SUCCESS', description: 'Server Docker image built and pushed')
                }
            }
        }

        stage('Deploy to Staging') {
            when { 
                branch 'develop'
                expression { env.CHANGE_ID == null }  // Skip for PRs
            }
            steps {
                script {
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                context: 'Staging Deploy', status: 'PENDING', description: 'Deploying client to staging')
                    try {
                        sh '''
                            docker rm -f f1nance-client-staging || true
                            sleep 3
                            docker run -d --name f1nance-client-staging -p 3000:80 ${CLIENT_IMAGE}:${BUILD_NUMBER}
                        '''
                        slackSend(channel: '#team2-ci-cd', color: '#2eb886',
                                  message: "‚úÖ *Staging* deployment successful for client build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", body: "Staging deployment succeeded for client build #${env.BUILD_NUMBER}")
                        githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                    context: 'Staging Deploy', status: 'SUCCESS', description: 'Client deployed to staging')
                    } catch (err) {
                        slackSend(channel: '#team2-ci-cd', color: '#a30200',
                                  message: "‚ùå *Staging* deployment failed for client build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", body: "Staging deployment failed for client build #${env.BUILD_NUMBER}: ${err}")
                        githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                    context: 'Staging Deploy', status: 'FAILURE', description: 'Client staging deployment failed')
                        error "Staging deployment failed"
                    }
                }
            }
        }

        stage('Deploy to QA') {
            when { 
                branch 'main'
                expression { env.CHANGE_ID == null }  // Skip for PRs
            }
            steps {
                script {
                    githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                context: 'QA Deploy', status: 'PENDING', description: 'Deploying to QA environment')
                    try {
                        withCredentials([
                            sshUserPrivateKey(credentialsId: 'cc1cf242-2558-4122-b60d-6bb23cf6601d', keyFileVariable: 'SSH_KEY'),
                            usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
                        ]) {
                            sh """
                                ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@52.14.182.184 << 'ENDSSH'
                                    # Stop and remove existing containers
                                    docker system prune -a
                                    
                                    sleep 2

                                    set -e

                                    # Login to Docker Hub
                                    echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

                                    # Pull latest images
                                    docker pull ${CLIENT_IMAGE}:latest
                                    docker pull ${SERVER_IMAGE}:latest

                                    # Run containers
                                    docker run -d --name f1nance-server -p 8000:8000 ${SERVER_IMAGE}:latest
                                    docker run -d --name f1nance-client -p 80:80 --link f1nance-server ${CLIENT_IMAGE}:latest

                                    echo "‚úÖ Deployment complete!"
                                    echo "üåê Application URLs:"
                                    PUBLIC_IP=\$(curl -s http://checkip.amazonaws.com)
                                    echo "   Client:  http://\$PUBLIC_IP"
                                    echo "   API:     http://\$PUBLIC_IP:8000"
ENDSSH
                            """
                        }
                        slackSend(channel: '#team2-ci-cd', color: '#2eb886',
                                  message: "üöÄ *QA* deployment successful for build #${env.BUILD_NUMBER}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", body: "QA deployment succeeded for build #${env.BUILD_NUMBER}")
                        githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                    context: 'QA Deploy', status: 'SUCCESS', description: 'QA deployment successful')
                    } catch (err) {
                        slackSend(channel: '#team2-ci-cd', color: '#a30200',
                                  message: "‚ùå *QA* deployment failed for build #${env.BUILD_NUMBER}: ${err.message}")
                        jiraComment(issueKey: "${JIRA_ISSUE}", body: "QA deployment failed for build #${env.BUILD_NUMBER}: ${err}")
                        githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                                    context: 'QA Deploy', status: 'FAILURE', description: 'QA deployment failed')
                        error "QA deployment failed: ${err.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker ps -aq | xargs -r docker stop
                docker container prune -f
                docker system prune -af --volumes || true
            '''
            cleanWs()
        }

        success {
            script {
                def branchInfo = env.CHANGE_ID ? "PR-${env.CHANGE_ID}" : env.BRANCH_NAME
                slackSend(channel: '#team2-ci-cd', color: '#36a64f',
                          message: "‚úÖ Pipeline succeeded for *${env.JOB_NAME}* build #${env.BUILD_NUMBER} on ${branchInfo}")
                jiraComment(issueKey: "${JIRA_ISSUE}", body: "Build #${env.BUILD_NUMBER} succeeded for ${branchInfo}")
                githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                            context: 'Build', status: 'SUCCESS', description: 'Pipeline succeeded')
            }
        }

        failure {
            script {
                def branchInfo = env.CHANGE_ID ? "PR-${env.CHANGE_ID}" : env.BRANCH_NAME
                slackSend(channel: '#team2-ci-cd', color: '#ff0000',
                          message: "‚ùå Pipeline failed for *${env.JOB_NAME}* build #${env.BUILD_NUMBER} on ${branchInfo}")
                jiraComment(issueKey: "${JIRA_ISSUE}", body: "Build #${env.BUILD_NUMBER} failed for ${branchInfo}")
                githubNotify(credentialsId: GITHUB_CREDENTIALS, account: GITHUB_ACCOUNT, repo: GITHUB_REPO, 
                            context: 'Build', status: 'FAILURE', description: 'Pipeline failed')
            }
        }
    }
}